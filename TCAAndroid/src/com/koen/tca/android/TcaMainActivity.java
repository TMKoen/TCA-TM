package com.koen.tca.android;

import com.koen.tca.android.DeviceIdentifier;
import com.koen.tca.android.state.AndroidEvents;
import com.koen.tca.android.state.AndroidStateMachine;
import com.koen.tca.android.util.SystemUiHider;
import com.koen.tca.android.R;

import android.R;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.telephony.TelephonyManager;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

public class TcaMainActivity extends Activity {

	// a reference to the singleton object which hold the device identification 
	// information like IMEI and telephone number.
	private DeviceIdentifier deviceInfo;
	
	// the state of the Android device: Idle, Expose, Ready or Test
	private AndroidStateMachine androidState;
	
	private final int PORTNUMBER = 6000;
	
	private Handler mainHandler;
	

	/**
	 * The main method that starts the activity (user interface).
	 * 
	 * @version
	 * @author Koen Nijmeijer
	 * 
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// gets the DeviceIdentifier object (singleton) and initialize it.
		deviceInfo = DeviceIdentifier.SINGLETON();
		deviceInfo.initDeviceIdentification(this);

		// Initialize the state machine. The Android goes to the Idle state by default.
		androidState = new AndroidStateMachine ();

		// Initialize the window UI like buttons, textview, etc.		
		setContentView(R.layout.activity_tca_main);
		
		// prepare the message queue with a looper (for sending messages between threads)
		Looper.prepare();
		mainHandler = new Handler () {
			public void HandleMessage (Message msg) {
				AndroidEvents event = (AndroidEvents) msg.obj;
				
				// starts the Android event that is generated by the working Thread.
				androidState.changeState(event);
			}
		};
		
		// Starts the message queue
		Looper.loop();
		
		Button buttonStartExpose = (Button) findViewById(R.id.button_find_server);
		Button buttonStopTest = (Button) findViewById (R.id.button_stop_testing);
		EditText ipaddress = (EditText) findViewById (R.id.EditText_ipaddr);
		 // onClick is executed when the user push on the 'Find Server' button
		buttonStartExpose.setOnClickListener(new Button.OnClickListener () {

			@Override
			public void onClick(View arg0) {
				String ipaddr = ipaddress.getText().toString();
				if (ipaddr != null || ipaddr != "") {
					
					// Add the Server IP address and the port number to the singleton deviceInfo object.
					deviceInfo.initServerCommunication(ipaddr, PORTNUMBER);
					androidState.changeState(AndroidEvents.START_EXPOSE);					
				} else {
					System.out.println("Fill in the IP Address of the Server!");
				}

			
			}
			
		});
		
		 // onClick is executed when the user push on the 'Stop testing' button
		 // if the state is 'Test', then this state must first back to 'Ready' before 'Idle' state can be invoked. 
		buttonStopTest.setOnClickListener(new Button.OnClickListener () {

			@Override
			public void onClick(View arg0) {
				if (androidState.getState().toString() == "Test") {
					androidState.changeState(AndroidEvents.STOP_TEST);
				}
				androidState.changeState(AndroidEvents.IDLE);
			}
			
		});
	}
}
